#include <TinyGPSPlus.h>
#include <Math.h>

boolean checkLocation(double lat, double lng, double wayPoint_lat, double wayPoint_long, double distance);
double getBearing(double lat,double lng,double wayPoint_lat,double wayPoint_long);

double getLat();
double latitude = 0;
double getLong();
double longitude = 0;
static const uint32_t GPSBaud = 9600;


const double wayPoint_Lat[] = { 41.74348831, 41.743265};

const double wayPoint_Long[] = {-74.08203125, -74.082544};
                               
                             
double current_Lat = 0;
double current_Long = 0;
int wayPointNumber = 0;

// The TinyGPS++ object
TinyGPSPlus gps;

void setup()
{
  Serial.begin(115200);
  Serial1.begin(GPSBaud);
  Serial.println("Testing GPS with simulated waypoints");
  Serial.println("Will show true if waypoint and current location are the same or off by certain factor");
}


void loop(){
  // This sketch displays information every time a new sentence is correctly encoded.
  while (Serial1.available() > 0){
    if (gps.encode(Serial1.read())){
      //get current positions
      current_Lat = getLat();
      Serial.print("Current Latitude: ");
      Serial.print(current_Lat,8);
      current_Long = getLong();
      Serial.print(" Current Longitude: ");
      Serial.print(current_Long,8);
      Serial.println();
      Serial.print("Current Waypoint Number: "); 
      Serial.println(wayPointNumber);
      Serial.print("Wapoiny Latitude: ");
      Serial.print(wayPoint_Lat[wayPointNumber],8);
      Serial.print(" Waypoint Longitude: ");
      Serial.println(wayPoint_Long[wayPointNumber],8);
      Serial.println();

      double angleBetweenPoints = getBearing(current_Lat, current_Long,wayPoint_Lat[wayPointNumber], wayPoint_Long[wayPointNumber]);
      if(angleBetweenPoints < 0){
        angleBetweenPoints += 360;
      }
      Serial.print("Angle between points: ");
      Serial.println(angleBetweenPoints);
      
      //check distance to waypoint
       double distanceFt =
    TinyGPSPlus::distanceBetween(current_Lat,current_Long,wayPoint_Lat[wayPointNumber], wayPoint_Long[wayPointNumber]) *3.28084; // get distance in feet
      Serial.print("Distance(ft) to waypoint: ");
      Serial.println(distanceFt);
      boolean atLocation = checkLocation(current_Lat,current_Long,wayPoint_Lat[wayPointNumber],wayPoint_Long[wayPointNumber], distanceFt);
      if(atLocation == true){
        wayPointNumber++;
      }
      
      
      
      
      
      //check current position return true if at location
      
      //Serial.println(atLocation);
      delay(1000);
      
    }
  }
  if (millis() > 5000 && gps.charsProcessed() < 10){
    Serial.println(F("No GPS detected: check wiring."));
    while(true);
  }
}
/*void displayInfo()
{
  Serial.print(F("Location: ")); 
  if (gps.location.isValid())
  {
    Serial.print(gps.location.lat(), 6);
    Serial.print(F(","));
    Serial.print(gps.location.lng(), 6);
  }
  else
  {
    Serial.print(F("INVALID"));
  }

  Serial.print(F("  Date/Time: "));
  if (gps.date.isValid())
  {
    Serial.print(gps.date.month());
    Serial.print(F("/"));
    Serial.print(gps.date.day());
    Serial.print(F("/"));
    Serial.print(gps.date.year());
  }
  else
  {
    Serial.print(F("INVALID"));
  }

  Serial.print(F(" "));
  if (gps.time.isValid())
  {
    if (gps.time.hour() < 10) Serial.print(F("0"));
    Serial.print(gps.time.hour());
    Serial.print(F(":"));
    if (gps.time.minute() < 10) Serial.print(F("0"));
    Serial.print(gps.time.minute());
    Serial.print(F(":"));
    if (gps.time.second() < 10) Serial.print(F("0"));
    Serial.print(gps.time.second());
    Serial.print(F("."));
    if (gps.time.centisecond() < 10) Serial.print(F("0"));
    Serial.print(gps.time.centisecond());
  }
  else
  {
    Serial.print(F("INVALID"));
  }

  Serial.println();
}*/

double getLat() {
  if (gps.location.isValid()) {
    return gps.location.lat();
  }
  else {
    Serial.println("Location Not Available");
  }
  
}
double getLong() {
  if (gps.location.isValid()) {
    return gps.location.lng();
  }
  
}

boolean checkLocation(double lat, double lng, double wayPoint_lat , double wayPoint_long, double distance) {
  // check the current loctation and the waypoint location,

  if (lat == wayPoint_lat && lng == wayPoint_long || distance <=10) {
    return true;
  }
  else {
    return false;
  }
}

double getBearing(double lat,double lng,double wayPoint_lat,double wayPoint_long){
double x = cos(wayPoint_lat) * sin(wayPoint_long - lng);
double y = (cos(lat) * sin(wayPoint_lat)) - (sin(lat) *cos(wayPoint_lat) * cos(wayPoint_long - lng));
double Beta = atan2(x,y);
Beta = Beta * 180/M_PI;

return Beta;
 
}
